apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    description: Redis for storing semi-persistent data like user sessions.
  labels:
    app.kubernetes.io/component: redis
    deploy: sourcegraph
    sourcegraph-resource-requires: no-cluster-admin
  name: redis-store
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redis-store
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: redis-store
        deploy: sourcegraph
    spec:
      containers:
        - image: index.docker.io/sourcegraph/redis-store:3.34.1@sha256:c0f07e5da450bc2e6f4d03fb793b8b6086676c6baf9b2243eaadd53cc931a886
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: redis
          name: redis-store
          ports:
            - containerPort: 6379
              name: redis
          readinessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: redis
          resources:
            limits:
              cpu: "1"
              memory: 7Gi
            requests:
              cpu: "1"
              memory: 7Gi
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /redis-data
              name: redis-data
        - image: index.docker.io/sourcegraph/redis_exporter:3.34.1@sha256:f3f51453e4261734f08579fe9c812c66ee443626690091401674be4fb724da70
          name: redis-exporter
          ports:
            - containerPort: 9121
              name: redisexp
          resources:
            limits:
              cpu: 10m
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 100Mi
          terminationMessagePolicy: FallbackToLogsOnError
      securityContext:
        runAsUser: 0
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-store
