meta:
  productName: deploy-sourcegraph
  repository: "github.com/sourcegraph/deploy-sourcegraph"
  owners:
    - "@sourcegraph/release"

inputs:
  - releaseId: server

requirements:
  # We use wget here, because curl --fail-with-body was introduced in a version ulterior to what we can have on the CI agents.
  - name: "wget"
    cmd: "wget --help"
  - name: "Github CLI"
    cmd: gh version
    fixInstructions: brew install gh
  - name: "GH auth status"
    cmd: "gh auth status"
    fixInstructions: "gh auth login"
  - name: "Docker username"
    env: DOCKER_USERNAME
  - name: "Docker password"
    env: DOCKER_PASSWORD

internal:
  create:
    steps:
      patch:
        - name: "sg ops (base)"
          cmd: |
            sg ops update-images \
              --kind k8s \
              --registry us-central1-docker.pkg.dev/sourcegraph-ci/rfc795-internal \
              --docker-username=$DOCKER_USERNAME \
              --docker-password=$DOCKER_PASSWORD \
              --pin-tag {{inputs.server.tag}} \
              base/
        - name: "sg ops (overlays)"
          cmd: |
            folders=$(find overlays -maxdepth 1 overlays -type d \! -name "low-resource")

            for path in $folders; do
              echo "updating ${path}"
              sg ops update-images \
                --kind k8s \
                --registry us-central1-docker.pkg.dev/sourcegraph-ci/rfc795-internal \
                --docker-username=$DOCKER_USERNAME \
                --docker-password=$DOCKER_PASSWORD \
                --pin-tag {{inputs.server.tag}} \
                ${path}/
            done
        - name: "sg ops (configure)"
          cmd: |
            folders=$(find configure -maxdepth 1 -type d)

            for path in $folders; do
              echo "updating ${path}"
              sg ops update-images \
                --kind k8s \
                --registry us-central1-docker.pkg.dev/sourcegraph-ci/rfc795-internal \
                --docker-username=$DOCKER_USERNAME \
                --docker-password=$DOCKER_PASSWORD \
                --pin-tag {{inputs.server.tag}} \
                ${path}/
            done
        - name: "git:branch"
          cmd: |
            set -eu
            branch="internal/release-{{version}}"
            echo "Creating branch $branch"
            git checkout -b $branch
        - name: "git:commit"
          cmd: |
            find . -name "*.yaml" | xargs git add
            find . -name "*.yml" | xargs git add

            # Careful with the quoting for the config, using double quotes will lead
            # to the shell dropping out all quotes from the json, leading to failed
            # parsing.
            git commit -m "release_patch: {{version}}" -m '{{config}}'
        - name: "git:push"
          cmd: |
            branch="internal/release-{{version}}"
            git push origin "$branch"
        - name: "github:pr"
          cmd: |
            set -eu
            gh pr create \
              --fill \
              --draft \
              --title "(internal) release_patch: build {{version}}" \
              --body "Test plan: automated release PR, CI will perform additional checks"
            echo "🚢 Please check the associated CI build to ensure the process completed".
      minor:
        - name: "sg ops (base)"
          cmd: |
            sg ops update-images \
              --kind k8s \
              --registry us-central1-docker.pkg.dev/sourcegraph-ci/rfc795-internal \
              --docker-username=$DOCKER_USERNAME \
              --docker-password=$DOCKER_PASSWORD \
              --pin-tag {{inputs.server.tag}} \
              base/
        - name: "sg ops (overlays)"
          cmd: |
            folders=$(find overlays -maxdepth 1 -type d \! -name "low-resource")

            for path in $folders; do
              echo "updating ${path}"
              sg ops update-images \
                --kind k8s \
                --registry us-central1-docker.pkg.dev/sourcegraph-ci/rfc795-internal \
                --docker-username=$DOCKER_USERNAME \
                --docker-password=$DOCKER_PASSWORD \
                --pin-tag {{inputs.server.tag}} \
                ${path}/
            done
        - name: "sg ops (configure)"
          cmd: |
            folders=$(find configure -maxdepth 1 -type d)

            for path in $folders; do
              echo "updating ${path}"
              sg ops update-images \
                --kind k8s \
                --registry us-central1-docker.pkg.dev/sourcegraph-ci/rfc795-internal \
                --docker-username=$DOCKER_USERNAME \
                --docker-password=$DOCKER_PASSWORD \
                --pin-tag {{inputs.server.tag}} \
                ${path}/
            done
        - name: "git:branch"
          cmd: |
            set -eu
            branch="internal/release-{{version}}"
            echo "Creating branch $branch"
            git checkout -b $branch
        - name: "git:commit"
          cmd: |
            find . -name "*.yaml" | xargs git add
            find . -name "*.yml" | xargs git add

            # Careful with the quoting for the config, using double quotes will lead
            # to the shell dropping out all quotes from the json, leading to failed
            # parsing.
            git commit -m "release_minor: {{version}}" -m '{{config}}'
        - name: "git:push"
          cmd: |
            branch="internal/release-{{version}}"
            git push origin "$branch"
        - name: "github:pr"
          cmd: |
            set -eu
            gh pr create \
              --fill \
              --draft \
              --title "(internal) release_patch: build {{version}}" \
              --body "Test plan: automated release PR, CI will perform additional checks"
            echo "🚢 Please check the associated CI build to ensure the process completed".
      major:
        - name: "sg ops (base)"
          cmd: |
            sg ops update-images \
              --kind k8s \
              --registry us-central1-docker.pkg.dev/sourcegraph-ci/rfc795-internal \
              --docker-username=$DOCKER_USERNAME \
              --docker-password=$DOCKER_PASSWORD \
              --pin-tag {{inputs.server.tag}} \
              base/
        - name: "sg ops (overlays)"
          cmd: |
            folders=$(find overlays -maxdepth 1 -type d \! -name "low-resource")

            for path in $folders; do
              echo "updating ${path}"
              sg ops update-images \
                --kind k8s \
                --registry us-central1-docker.pkg.dev/sourcegraph-ci/rfc795-internal \
                --docker-username=$DOCKER_USERNAME \
                --docker-password=$DOCKER_PASSWORD \
                --pin-tag {{inputs.server.tag}} \
                ${path}/
            done
        - name: "sg ops (configure)"
          cmd: |
            folders=$(find configure -maxdepth 1 -type d)

            for path in $folders; do
              echo "updating ${path}"
              sg ops update-images \
                --kind k8s \
                --registry us-central1-docker.pkg.dev/sourcegraph-ci/rfc795-internal \
                --docker-username=$DOCKER_USERNAME \
                --docker-password=$DOCKER_PASSWORD \
                --pin-tag {{inputs.server.tag}} \
                ${path}/
            done
        - name: "git:branch"
          cmd: |
            set -eu
            branch="internal/release-{{version}}"
            echo "Creating branch $branch"
            git checkout -b $branch
        - name: "git:commit"
          cmd: |
            find . -name "*.yaml" | xargs git add
            find . -name "*.yml" | xargs git add

            # Careful with the quoting for the config, using double quotes will lead
            # to the shell dropping out all quotes from the json, leading to failed
            # parsing.
            git commit -m "release_major: {{version}}" -m '{{config}}'
        - name: "git:push"
          cmd: |
            branch="internal/release-{{version}}"
            git push origin "$branch"
        - name: "github:pr"
          cmd: |
            set -eu
            gh pr create \
              --fill \
              --draft \
              --title "(internal) release_patch: build {{version}}" \
              --body "Test plan: automated release PR, CI will perform additional checks"
            echo "🚢 Please check the associated CI build to ensure the process completed".
  finalize:
    steps:
      - name: "notifications"
        cmd: |
          set -eu

          branch="internal/release-{{version}}"

          # Post a comment on the PR.
          cat << EOF | gh pr comment "$branch" --body-file -
          - :green_circle: Internal release is ready for promotion!
          - :warning: Do not close/merge the pull request or delete the associated branch if you intend to promote it.
          EOF
          # Post an annotation.
          cat << EOF | buildkite-agent annotate --style info
          Internal release is ready for promotion under the branch [\`$branch\`](https://github.com/sourcegraph/deploy-sourcegraph/tree/$branch).
          EOF
      - name: 'Register on release registry'
        cmd: |
          echo "Registering internal deploy-sourcegraph-docker {{version}} release on release registry"
          COMMIT_SHA=$(git rev-parse HEAD)
          body=$(wget --content-on-error -O- --header="Content-Type: application/json" --header="Authorization: ${RELEASE_REGISTRY_TOKEN}" --post-data '{
              "name": "deploy-sourcegraph",
              "version": "{{version}}",
              "git_sha": "'${COMMIT_SHA}'"
            }' "https://releaseregistry.sourcegraph.com/v1/releases")
          exit_code=$?

          if [ $exit_code != 0 ]; then
            echo "❌ Failed to create release in release registry, got:"
            echo "--- raw body ---"
            echo $body
            echo "--- raw body ---"
            exit $exit_code
          else
            echo "Release created, see:"
            echo $body
          fi

test:
  steps:
    - name: "placeholder"
      cmd: |
        echo "-- pretending to test release ..."

promoteToPublic:
  create:
    steps:
      - name: "git"
        cmd: |
          set -eu
          branch="internal/release-{{version}}"
          echo "Checking out origin/${branch}"
          git fetch origin "${branch}"
          git switch "${branch}"
      - name: "sg ops (base)"
        cmd: |
          sg ops update-images \
            --kind k8s \
            --registry index.docker.io/sourcegraph \
            --docker-username=$DOCKER_USERNAME \
            --docker-password=$DOCKER_PASSWORD \
            --pin-tag {{inputs.server.tag}} \
            base/
      - name: "sg ops (overlays)"
        cmd: |
          folders=$(find overlays -maxdepth 1 -type d \! -name "low-resource")

          for path in $folders; do
            echo "updating ${path}"
            sg ops update-images \
              --kind k8s \
              --registry index.docker.io/sourcegraph \
              --docker-username=$DOCKER_USERNAME \
              --docker-password=$DOCKER_PASSWORD \
              --pin-tag {{inputs.server.tag}} \
              ${path}/
          done
      - name: "sg ops (configure)"
        cmd: |
          folders=$(find configure -maxdepth 1 -type d )

          for path in $folders; do
            echo "updating ${path}"
            sg ops update-images \
              --kind k8s \
              --registry index.docker.io/sourcegraph \
              --docker-username=$DOCKER_USERNAME \
              --docker-password=$DOCKER_PASSWORD \
              --pin-tag {{inputs.server.tag}} \
              ${path}/
          done
      - name: "git:branch"
        cmd: |
          set -eu
          branch="promote/release-{{version}}"
          git switch -c "${branch}"
      - name: "git:commit"
        cmd: |
          set -eu
          branch="promote/release-{{version}}"
          find . -name "*.yaml" | xargs git add
          find . -name "*.yml" | xargs git add

          # Careful with the quoting for the config, using double quotes will lead
          # to the shell dropping out all quotes from the json, leading to failed
          # parsing.
          git commit -am 'promote-release: {{version}}' -m '{{config}}'
          git push origin "${branch}"
      - name: "github:pr"
        cmd: |
          set -eu
          internal_branch="internal/release-{{version}}"
          gh pr create \
            --fill \
            --draft \
            --base "$internal_branch" \
            --title "(promote) release: build {{version}}" \
            --body "Test plan: automated release PR, CI will perform additional checks"
          echo "🚢 Please check the associated CI build to ensure the process completed".
  finalize:
    # These steps should only really run once the pr created in the create step is merged
    steps:
      - name: 'Promote on release registry'
        cmd: |
          echo "Promoting deploy-sourcegraph {{version}} release on release registry"
          body=$(wget --content-on-error -O- --header="Content-Type: application/json" --header="Authorization: ${RELEASE_REGISTRY_TOKEN}" --post-data '' "https://releaseregistry.sourcegraph.com/v1/releases/deploy-sourcegraph/{{version}}/promote")
          exit_code=$?

          if [ $exit_code != 0 ]; then
            echo "❌ Failed to promote release on release registry, got:"
            echo "--- raw body ---"
            echo $body
            echo "--- raw body ---"
            exit $exit_code
          else
            echo "Release promoted, see:"
            echo $body
          fi
      - name: git:tag
        cmd: |
          set -eu

          # Branches
          internal_branch="internal/release-{{version}}"
          promote_branch="promote/release-{{version}}"
          release_branch="qa-release-{{version}}"

          # Create the final branch holding the tagged commit
          git checkout "${promote_branch}"
          git switch -c "${release_branch}"
          git tag qa-{{version}}
          git push origin ${release_branch} --tags

          # Web URL to the tag
          tag_url="https://github.com/sourcegraph/deploy-sourcegraph/tree/{{version}}"

          # Annotate PRs
          cat << EOF | gh pr comment "$internal_branch" --body-file -
          - :green_circle: Release has been promoted, see tag: $tag_url.
          - :no_entry: Do not under any circumstance delete the branch holding the tagged commit (i.e. \`$release_branch\`).
          - :arrow_right: You can safely close the PR and delete its a associated branch.
          EOF

          cat << EOF | gh pr comment "$promote_branch" --body-file -
          - :green_circle: Release has been promoted, see tag: $tag_url.
          - :no_entry: Do not under any circumstance delete the branch holding the tagged commit (i.e. \`$release_branch\`).
          - :arrow_right: You can safely close that PR and delete its a associated branch.
          EOF

          # Annotate build
          cat << EOF | buildkite-agent annotate --style info
          Promoted release is **publicly available** through a git tag at [\`{{version}}\`](https://github.com/sourcegraph/deploy-sourcegraph/tree/{{version}}).
          EOF
